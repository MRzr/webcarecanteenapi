FORMAT: 1A

# Webcare Canteen API

API documentation for upcoming Webcare Canteen API.

Every request must include header Accept-Language to get response in correct language, if missing or not recognized default language is used.

` `

Authorization token is obtained through HTTP Basic Auth or by login request for card authorization. Identification of customer (or admin) is decoded from token.

    
` `


Successful response is code 200. Errors are returned as standard HTTP errors with corresponding error code (4xx - client error, 5xx - server error) and description 

When force error occurs server returns status code 449 and object with following schema
https://drive.google.com/file/d/0B1_u4k6eQMDqc3NnZy1Zcm53azQ/view?usp=sharing
Client displays alert constructed from force object and responses with force_answer or force_cancel. Only POST methods implements force error.

` `


` `

Definition of additional data objects with example: https://docs.google.com/document/d/14NSKxR2U8BEieUCxF4dxUFpR49ISOTBhmiXAw_OpBWQ/edit?usp=sharing

` `

Links returned by API can be formatted in two ways. Standard links with http:// or https:// and link to resource on page `image://product.jpg` means that path to resource is `https://server.url/image/product.jpg`

` `


All parameters and request attributes are optional by default.

` `

#Enumarated types
## CancelStatus (enum[string])
- NOT_POSSIBLE - Cannot be canceled
- FOR_EXCHANGE - Can be offered for exchange
- POSSIBLE - Can be canceled

## OrderStatus (enum[string])
- ACTIVE - Current orders
- CLOSED - Past orders
- FOR_EXCHANGE - Order offered for exchange
- CANCELED - Canceled orders

## MenuStatus (enum[string])
- CLOSED - Orders closed
- SOLD_OUT - Sold out
- SINGLE_ITEM - Available to order single item
- MULTIPLE - Available to order multiple items

## MenuTimeSpan (enum[string])
- DAY - 1 day time span
- WEEK - 7 day time span
- TIMESPAN - Configured time span of menu

## HealthIndex (enum[string])
- UNHEALTHY - Unhealthy - red
- NORMAL - Normal - orange
- HEALTHY - Healthy - green

## Menu [/menu]

### Get menu (NEW) [GET /menu?date={date}&timespan={timespan}&firstDay={firstDay}&canteenId={canteenId}]
Get menu for customer. If no attributes are provided menu is based on customer default preferences set in Septim.

+ Parameters 
    - date:  `dd-MM-yyyy` (string, optional) - Date of order
    - timespan: DAY (MenuTimeSpan, optional) - selected time span of order
    - canteenId: 12 (number, optional) - id of selected canteen

+ Request (application/json)
    + Headers
    
            Authorization: abc  (required) - customer authorization
        

+ Response 200 (application/json)
    + Attributes (MenuResponse)
    


### Get product details by ids [GET /products/details?productIds={ids}&modifiedOnly={modifiedOnly}]

Parameter productIds defines which product details should be returned, if combined with modifiedOnly, results are filtered to contain only newly updated results from provided list of ids.


Return list of requested product details.

+ Parameters
    - ids:  1,2,3 (array[number], required) - List of product ids to be returned.
    - modifiedOnly: true  (bool, required) - Filter list to contain only updated products.
+ Response 200  (application/json)
    + Attributes (array[Product], fixed-type, required)
    

    
## Canteens [/canteen]

### Get canteens (NEW) [GET /canteen]

Get list of canteens for customer.

+ Request (application/json)
    + Headers
    
            Authorization: abc  (customer credentials)
            
+ Response 200 (application/json)
    + Attributes (array[Canteen])


## Orders  [/order]


### Create direct order (NEW) [POST /order/direct]

Returns order confirmation.

+ Request (application/json)
    + Headers
    
            Authorization: abc  (customer credentials)
    + Attributes (OrderDirectRequest)

        

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)
        

        
### Create order from cart (NEW) [POST /order/cart]

Returns order confirmation.

+ Request (application/json)
    + Headers
    
            Authorization: abc  (customer credentials)
            
    + Attributes (OrderCartRequest)

        

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)
        
        

### Check  order from cart (NEW) [POST /order/cart/check]

Check if order can be placed.

+ Request (application/json)
    + Headers
    
            Authorization: abc  (customer credentials)
            
    + Attributes (OrderCartRequest)

        
+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)




## Customer profile & management [/customer]

### Login (CHANGED) [POST /customer/login]

Verifies combination of customer email and password by authorization token. If combination is wrong error code is returned, otherwise response is successful and client can use the token to authorize other requests.


Septim does not hold status of customer login. Every request is verified by Authorization token
Request verifies if combination of email and password provided by customer is correct or provide Authorization token based on customer's card id.


+ Request (application/json)
    + Headers
    
            Authorization: abc (optional) - If provided token is validated. 
    + Attributes
        + cardId: abc (string, optional) - Identification of card read by card reader.
        
+ Response 200 (application/json)
    + Attributes
        + success: true (boolean, optional) - Result of authorization token validation.
        + token: abc (string, optional) - Authorization token for provided cardId
 

### Customer registration (1st step) [POST /customer/register/start]

Customer email, name and other profiles informations (components defined in web config) for registration. Email to customer is sent to verify his address.
Email contains link needed (with token) to continue registration process.

+ Request (application/json)
    + Attributes (CustomerProfileRequest)

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean) - Confirmation of successful registration step.
       

### Customer registration (2st step) [POST /customer/register/finish]

Customer enters his password and completes registration. Login is not needed after this step.

+ Request (application/json)
    + Attributes

        + password (string, required) - Password provided by customer
        + token: abc (string, required) - Token from emailed link. Customer is identified by token.
+ Response 200 (application/json)
    + Attributes
        + success: true (boolean) - Confirmation of successful registration step.

### Change Password [POST /customer/password/change]

Need to provide old Password to authorize password change.


+ Request (application/json)

    + Headers
    
            Authorization: abc

    + Attributes
        + passwordOld (string, required) - Old password provided by customer to verifies his identity. Required if changing password of logged customer.
        + passwordNew (string, required) - New password to change provided by customer.

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)
       

### Request Password Reset [POST /customer/password/resetrequest]

Email with link for password reset (reset key) is send to customer if customer exist in database.


+ Request
    + Attributes
        + email (string, required) - Email of customer for password reset

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean) - Confirmation of successful email reset request
       
### Reset Password [POST /customer/password/reset]

Second step of password reset. Need to provide key sent to customer by email (reset request).

+ Request (application/json)


    + Attributes
        + passwordNew (string, required) - New password to change provided by customer.
        + resetKey (string, required) - Reset key sent to customer by email. Customer is identified by by this key.

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)
       

### Get Customer Profile [GET /customer]

Returns profile of current customer.

+ Request (application/json)
    + Headers
    
            Authorization: abc (required)

+ Response 200 (application/json)
    + Attributes (CustomerProfile)

### Change Customer Profile [POST /customer]

Change customer informations.

+ Request (application/json)
    + Headers
    
            Authorization: abc (required)
    + Attributes (CustomerProfileRequest)

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean)

### Get active orders and last completed orders (CHANGED) [GET /customer/orders?limitClosedCount={limitClosedCount}&statusCodes={statusCodes}]

Returns list of customer's last orders, closed orders are limited by query parameter limit.

+ Parameters
    - limitClosedCount: 5 (number, optional) - Number of closed orders to be returned. If not provided results are limited by Septim to 10 results.
    - statusCodes (array[OrderStatus], optional) - List of status code to be included in results. If not provided orders are not filtered by status.
+ Request (application/json)
    + Headers
    
            Authorization: abc (required)

+ Response 200 (application/json)
    + Attributes (array[Order])
    

### Get order (CHANGED) [GET /customer/order?orderId={orderId}]

Return single order of customer by id.

+ Parameters
    - orderId: abc (string) - Identification of order
+ Request (application/json)
    + Headers
    
            Authorization: abc (required)

+ Response 200 (application/json)
    + Attributes (Order)

### Top up customer account (NEW) [POST /customer/account/topup]


Request customer account top up. Webcare api creates unique transaction id for payment gateway.

+ Request (application/json)
    + Headers
    
            Authorization: abc (required)
    + Attributes
         + amount: 12 (number, required) - Amount to top up.

+ Response 200 (application/json)
    + Attributes 
        + transactionId: 2332 (number, required) - Unique transaction id for payment gateway.
        

### Get last transaction history & account balance [GET /customer/account?limitCount={limitCount}]


Returns customer's transaction history and current account balance.

+ Parameters
    - limitCount: 5 (number) - Number of results to be returned. If not provided results are limited by Septim to 10 results.
+ Request (application/json)
    + Headers
    
            Authorization: abc (required)

+ Response 200 (application/json)
    + Attributes 
        + transactions (array[Transaction]) - List of transactions
        + balance: 430 (number) - Current customer's balance


### Top up payment result (NEW) [POST /customer/topup/result]

Request between private Web API and Septim API. Confirms successful payment of transaction or cancels transaction in case of error in payment.
Request is authorized with admin credentials.
    
+ Request (application/json)
    + Headers
    
            Authorization: abc (admin credentials)
        
    + Attributes (PaymentResult)

+ Response 200 (application/json)
    + Attributes
        + success: true (boolean) - Confirmation of successful request
        
## Web API requests [/api]


### Get payment link for(NEW) [POST /api/topup/link]

Not part of Septim API
    
Request between client and web api.

After payment validation, browser is redirected to specified return URL with GET parameters withpayment result. (?paymentSuccess=true)

+ Request (application/json)
    + Headers
    
            Authorization: abc (customer credentials,optional)

    + Attributes (GatewayRequest)
+ Response 200
    + Attributes (GatewayResponse)
        

        

      

# Data Structure



## CancelStatus (enum[string])
- NOT_POSSIBLE - Cannot be canceled
- FOR_EXCHANGE - Can be offered for exchange
- POSSIBLE - Can be canceled

## OrderStatus (enum[string])
- ACTIVE - Current orders
- CLOSED - Past orders
- FOR_EXCHANGE - Order offered for exchange
- CANCELED - Canceled orders

## MenuStatus (enum[string])
- CLOSED - Orders closed
- SOLD_OUT - Sold out
- SINGLE_ITEM - Available to order single item
- MULTIPLE - Available to order multiple items

## MenuTimeSpan (enum[string])
- DAY - 1 day time span
- WEEK - 7 day time span
- TIMESPAN - Configured time span of menu

## HealthIndex (enum[string])
- UNHEALTHY - Unhealthy - red
- NORMAL - Normal - orange
- HEALTHY - Healthy - green

## AdditionDataComponent (enum[string])
- const-image
- const-text
- var-image
- var-text
- input-text

## Product

- id: 123 (number, required) - Product unique identificator
- name: Soup (string, required) - Product display name
- image: image://123.jpg (string, required) - Url to product image. See Introduction -  Links
- description: Product Description (string, required) - Product description text
- size: 200 ml (string, required) - Size of product (weight, volume...)
- additionalData (array[AdditionalData], optional, fixed-type) - Other product informations

## ProductAllergen

- shortName: 01 (string, required) - Short name of allergen
- longName: Shrimp (string, required) - Long name of allergen


## OrderItem
- menuItemId: 123 (number, required) - Id of meal to order
- quantity: 2 (number, required) - Quantity of ordered product. If not provided quantity is 1.


## Canteen 
- id: 77 (number, required) - Unique identificator of outlet
- name: Outlet 1 (string, required) - Display name of outlet

## MenuRequest 
- date:  `dd-MM-yyyy` (string, optional) - Date of order
- timespan: week (MenuTimeSpan, optional) - selected time span of order
- canteenId: 12 (number, optional) - id of selected canteen

## MenuResponse
- timespan: week (MenuTimeSpan, required, sample) - Displayed timespan of menu
- canteenId: 123 (number, required) - Canteen id of menu
- filters (array[MenuFilter], required, fixed-type) - Available filters for menu
- menu (array[Menu], required, fixed-type) - Menu by days

## Menu
- date:  `dd-MM-yyyy` (string, required) - Date of menu
- items (array[MenuItem], required, fixed-type) - Available menu items


## MenuItem
- id: 23 (number, required) - Id of menu item
- productId: 12Mod (number, nullable, optional) - Product recipe
- price: 23 (number, required) - Price of item
- name: Menu 1 (string, required) - Name of menu
- status: SINGLE_ITEM (MenuStatus, sample, required)
- filter: launch (string, required) - Filter value of menu
- allergens (array[ProductAllergen], required, fixed-type) - List of allergens in product
- healthIndex: HEALTHY (HealthIndex, sample, nullable, optional)

## MenuFilter
- value: launch (string, required) - Value for filter
- label: Obed (string, required) - Label of filter

## OrderDirectRequest
- price: 300 (number, required) - Price of order.
- item (OrderItem, required) - Item to order
- orderDate: `dd-MM-yyyy` (string, required) - Date order will be created for
- canteenId: 12 (number, required) - Canteen for order
- additionalData (array[AdditionalDataRequest], optional) - Other order data

## OrderCartRequest
- price: 300 (number, required) - Price of order.
- orderDate: `dd-MM-yyyy` (string, required) - Date order will be created for
- canteenId: 12 (number, required) - Canteen for order.
- items (array[OrderItem], required, fixed-type) - Items to order
- additionalData (array[AdditionalDataRequest], optional) - Other order data


## Order
- id: abc (string, required) - Unique identification of order
- date:  `dd-MM-yyyy` (string, required) - Date of order
- filter: launch (string, required) - Group of order
- canteenId: 77 (number, required)
- status: ACTIVE (OrderStatus, sample, required) - Current status code of order
- cancelStatus: POSSIBLE (CancelStatus, sample, required) - Cancel options
- price: 232 (number, required) - Total price of order
- items (array[OrderItem], required, fixed-type) - List of ordered products
- additionalData (array[AdditionalData],optional, fixed-type) - Other order informations

## OrderConfirmation
- id: abc (string, required) - Unique identification of order
- status: ACTIVE (OrderStatus, required) - Current status code of order
- orderPrice: 232 (number, required) - The order price.

## CustomerProfileRequest

- email: john.doe@gmail.com (string, required) - Customer email (unique in database). Cannot be changed
- firstName: John (string, required) - First name of customer
- lastName: Doe (string, required) - Last name of customer
- additionalData (array[AdditionalData], optional, fixed-type) - Other customer informations

## CustomerProfile (CustomerProfileRequest)
- id: 832 (number, required) - Unique id of customer


## AdditionalDataBase
- variableId: customerCountry (string, required) - Id of data object in administration
- value: Czech Republic (string, required) - Value of data object

## AdditionalData (AdditionalDataBase, fixed-type)

## AdditionalDataRequest (AdditionalDataBase)
- type: input-text (AdditionDataComponent,required, sample) - Type of data object
- label: Label (string, optional) - input label which describes the field. for type input-text
- target (string, optional) - target of data object

## Transaction
- id: 23 (number, required) - Unique identificator of transaction
- amount: `-300` (number, required) - Amount changed on customer account
- dateTime `dd-MM-yyyy HH:mm`  (string, required) - DateTime of transaction
- description: Payment of order 233 (string, required) - Description text of transaction

##GatewayRequest
- toBePaid: 111 (number, required) - The amount, which should be paid.
- returnUrl: http://return.url/ (string, required) -  Defines return adress, after payement completion

##GatewayResponse
- gatewayLink: http://link.to.gateway/payment (string, required) - Link to payment gateway


## PaymentResult
- transactionId: abc (string, required) - Id of transaction
- paymentSuccessful: true (boolean, required) - Result of payment

## PaymentResultResponse
- paid: 23 (number, required) - amount paid by customer